#!/usr/bin/env bash
# wrapper around linter/formatters
# pauses at each step if there are errors
# this is run locally to autoformat/lint code

set -o pipefail

# get the name of this script
declare script_name
script_name="$(basename "${BASH_SOURCE[0]}")"

# function to verify an external command is installed
havecmd() {
	local BINARY ERRMSG
	# error if first argument isn't provided
	BINARY="${1:?Must provide command to check}"
	# the commend exists, exit with 0 (success!)
	if command -v "${BINARY}" >/dev/null 2>&1; then
		return 0
	else
		# construct error message
		ERRMSG="'${script_name}' requires '${BINARY}', could not find that on your \$PATH"
		if [[ -n "$2" ]]; then
			ERRMSG="${ERRMSG}. $2"
		fi
		printf '%s\n' "${ERRMSG}" 1>&2
		return 1
	fi
}

set -e
havecmd shellcheck
havecmd exists 'See https://github.com/seanbreckenridge/exists'
havecmd rifleman 'See https://github.com/seanbreckenridge/rifleman'
havecmd pytest
havecmd jq
havecmd tput
havecmd mypy
havecmd flake8
havecmd black
havecmd shfmt
set +e

# cd to base directory
BASE_DIR="$(realpath "$(dirname "${BASH_SOURCE[0]}")"/..)"
readonly BASE_DIR
cd "${BASE_DIR}" || exit 1
printf 'In: %s\n' "$(pwd)"

# call shellcheck on all the scripts
shellcheck_scripts() {
	git ls-files | exists | rifleman - -a lint -j | jq -r 'to_entries[] | select(.key|startswith("shellcheck")) | .value | .[]' | xargs shellcheck
}

prompt() {
	local MESSAGE
	MESSAGE='Hit enter to continue > '
	[[ -n "$1" ]] && MESSAGE="$1"
	echo -en "$(tput setaf 1)${MESSAGE}$(tput sgr0)"
	read -r # if no variable is specified, sets the REPLY environment variable
}

update_fork() {
	local FORK_LOCATION
	FORK_LOCATION="$(realpath ../HPI-karlicoss/)"
	cd "${FORK_LOCATION}" || return $?
	git checkout master
	git pull upstream master
}

main() {
	(update_fork) # cd in subshell
	python3 -m pytest "$@" || prompt ''
	echo "Running mypy..."
	MY_CONFIG="${BASE_DIR}/tests/my" mypy --install-types --non-interactive --color-output -p my || prompt ''
	python3 -m mypy ~/.config/my/my/config/ || prompt ''
	python3 -m flake8 ./my || prompt ''
	echo "Running shellcheck..."
	shellcheck_scripts
	# format everything in the repo
	git ls-files | exists | rifleman -
	echo -e "$(tput setaf 2)Done!$(tput sgr0)"
	git status
}

main "$@"
