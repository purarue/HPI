#!/usr/bin/env bash
# If the 'CI' environment variable is set, this runs
# like it would on the CI. To try and test that locally,
# can do: CI_SKIP_INSTALL=1 CI=1 ./install
set -o pipefail

ci() {
	[[ -n "${CI}" ]]
}

ci && set -x

# script to setup HPI
# - installs karlicoss/HPI as an editable namespace package,
# - installs this repo
# - installs additional python packages for modules
# - checks for any required external commands

# cd to base directory
BASE_DIR="$(dirname "${BASH_SOURCE[0]}")"
cd "${BASE_DIR}" || exit 1
printf 'In: %s\n' "$(pwd)"

# function to verify an external command is installed
havecmd() {
	local BINARY ERRMSG script_name
	script_name='HPI'
	# error if first argument isn't provided
	BINARY="${1:?Must provide command to check}"
	# the commend exists, exit with 0 (success!)
	if command -v "${BINARY}" >/dev/null 2>&1; then
		return 0
	else
		# construct error message
		ERRMSG="'${script_name}' requires '${BINARY}', could not find that on your \$PATH"
		if [[ -n "$2" ]]; then
			ERRMSG="$ERRMSG. $2"
		fi
		printf '%s\n' "$ERRMSG" 1>&2
		return 1
	fi
}

maybe_boxes() {
	# Print a fancy box, if boxes is installed
	# http://boxes.thomasjensen.com/
	if havecmd boxes >/dev/null 2>&1; then
		boxes -dshell -pv1h2
	else
		cat
	fi
}

prompt_if_fails() {
	ci && return 1
	printf "Command failed... Hit Enter to continue, Ctrl+C to exit"
	read -r
}

pipm() {
	python3 -m pip "$@"
}

pip_install() {
	pipm install --user "$@"
}

# install dependencies (with pip) for this module
# this works by traversing the AST/looking for
# a 'REQUIRES' global variable in the
# corresponding file
hpi_module() {
	python3 -m my.core module install --user "$@"
}

ci_install_deps() {
	if [[ -n "${CI}" && -z "${CI_SKIP_INSTALL}" ]]; then
		# install OS specific stuff here
		if [[ "$OSTYPE" == "darwin"* ]]; then
			# macos ci
			brew install coreutils
			brew install boxes
		else
			# ubuntu ci
			sudo apt update
			sudo apt install boxes
		fi
		pip_install -U pip wheel setuptools
	fi
}

install_dependencies() {
	echo 'Installing dependencies...' | maybe_boxes
	if ci; then
		ci_install_deps || return $?
	else
		pip_install 'git+https://github.com/karlicoss/arctee' || return $?
		pip_install 'git+https://github.com/seanbreckenridge/reorder_editable' || return $?
	fi
}

required_commands() {
	echo 'Checking if required commands are installed...' | maybe_boxes
	havecmd realpath || return $?
	havecmd git || return $?
}

setup_fork() {
	local FORK_ABBREV UPSTREAM_URL UPSTREAM_DIR
	echo 'Setting up upstream fork...' | maybe_boxes

	FORK_ABBREV='HPI-karlicoss'
	UPSTREAM_URL='https://github.com/karlicoss/HPI'

	UPSTREAM_DIR="$(realpath "../${FORK_ABBREV}")"

	# clone my fork one level up from here if it doesnt exist
	if [[ ! -e "${UPSTREAM_DIR}" ]]; then
		git clone "${UPSTREAM_URL}" "${UPSTREAM_DIR}"
	else
		echo "Path already exists, skipping clone..."
	fi

	# install upstream/core HPI
	cd "${UPSTREAM_DIR}" || return $?

	if ci; then
		pip_install -e '.[optional,testing]' || return $?
	else
		pip_install -e '.[optional]' || return $?
	fi

	# cd back to here, to install this
	cd "${BASE_DIR}" || return $?
	pip_install -e '.' || return $?

	# if on CI, don't reorder path
	ci && return 0

	# make sure my repository appears before the upstream repo
	python3 -m reorder_editable reorder "${BASE_DIR}" "${UPSTREAM_DIR}" || return $?
	python3 -m reorder_editable cat | maybe_boxes
}

module_dependencies() {
	if ! ci; then
		printf 'Install all module dependencies? [y/N] '
		read -r || return $?
		case "${REPLY}" in
		y | Y) ;;
		*)
			return 0
			;;
		esac
	fi
	echo "Installing module dependencies" | maybe_boxes
	# from karlicoss/HPI; only install these if envvar is set
	# is pretty much for my personal usage, no one else needs
	# these and they don't need to install in CI
	if [[ -n "${HPI_INSTALL_UPSTREAM_MODULES}" ]]; then
		hpi_module my.github.ghexport || return $?
		hpi_module my.reddit.pushshift || return $?
		hpi_module my.reddit.rexport || return $?
		hpi_module my.pdfs || return $?
		hpi_module my.smscalls || return $?
		hpi_module my.coding.commits || return $?
	fi
	# from this repo
	hpi_module my.window_watcher || return $?
	hpi_module my.browser.export || return $?
	hpi_module my.discord.data_export || return $?
	hpi_module my.google_takeout || return $?
	hpi_module my.time.tz.via_location || return $?
	hpi_module my.todotxt.file_backups || return $?
	hpi_module my.location.ip || return $?
	hpi_module my.location.gpslogger || return $?
	hpi_module my.chess.export || return $?
	hpi_module my.mpv.history_daemon || return $?
	hpi_module my.league.export || return $?
	hpi_module my.trakt.export || return $?
	hpi_module my.mail.imap || return $?
	hpi_module my.grouvee.export || return $?
	hpi_module my.mal.export || return $?
	hpi_module my.listenbrainz.export || return $?
	hpi_module my.old_forums || return $?
	hpi_module my.skype.gdpr || return $?
}

ci_config() {
	CONF="$(realpath "${BASE_DIR}/tests/my")" || return $?
	MY_CONFIG="${CONF}" python3 -m my.core config check 1>&2 || return $?
	echo "${CONF}"
}

ci_tests() {
	ci && unset HPI_TESTS_SEANB
	pytest ./tests || return $?
}

ci_mypy() {
	# find my -name '*.py' | grep -v '__' | grep -Ev 'nextalbums|mint' | sed -e 's|\.\/||' -e 's|/|.|g' -e 's/\.py$//g' -e 's/$/ \\/' -e 's/^/-p /' | sort
	python3 -m mypy --install-types --non-interactive \
		-p tests \
		-p my.apple.privacy_export \
		-p my.bash \
		-p my.blizzard.gdpr \
		-p my.browser.export \
		-p my.chess.export \
		-p my.discord.data_export \
		-p my.facebook.gdpr \
		-p my.google_takeout \
		-p my.grouvee.export \
		-p my.ipython \
		-p my.league.export \
		-p my.listenbrainz.export \
		-p my.location.all \
		-p my.location.gpslogger \
		-p my.location.ip \
		-p my.location.models \
		-p my.mail.imap \
		-p my.mal.export \
		-p my.mpv.history_daemon \
		-p my.old_forums \
		-p my.project_euler \
		-p my.rss.newsboat.file_backups \
		-p my.runelite.screenshots \
		-p my.skype.gdpr \
		-p my.spotify.gdpr \
		-p my.steam.scraper \
		-p my.time.tz.via_location \
		-p my.todotxt.file_backups \
		-p my.trakt.export \
		-p my.ttt \
		-p my.twitch.all \
		-p my.twitch.common \
		-p my.twitch.gdpr \
		-p my.twitch.overrustle_logs \
		-p my.utils.input_source \
		-p my.utils.time \
		-p my.window_watcher \
		-p my.zsh \
		--txt-report .coverage.mypy || return $?
}

ci_run() {
	ci || return 0
	CONF="$(ci_config)" || return $?
	MY_CONFIG="${CONF}" ci_tests || return $?
	MY_CONFIG="${CONF}" ci_mypy || return $?
}

main() {
	install_dependencies || prompt_if_fails || return $?
	required_commands || prompt_if_fails || return $?
	# use realpath to make sure BASE_DIR is set properly
	BASE_DIR="$(realpath "${BASE_DIR}")" || return $?
	(setup_fork) || prompt_if_fails || return $?
	module_dependencies || prompt_if_fails || return $?
	ci_run || return $?
}

main "$@" || exit $?
